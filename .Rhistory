#Corrélation variables
cormat <- cor(donnees,method = "pearson")
donnees <- read.csv("kc_house_data.csv")
donnees.init <- read.csv("kc_house_data.csv")
#### Prétraitement ####
str(donnees)
summary(donnees)
donnees <- donnees[!donnees$bathrooms == 0,] #10 cas
donnees <- donnees[!donnees$bedrooms == 0,] #13 cas
#6 cas ont bedrooms = 0 et bathrooms = 0
#Si on considère que c'est des maisons/jumelé, on trouve ça peu logique de conserver les 6 cas sans chambres (s'il y avait appart, ça pourrait faire du sens)
donnees$bedrooms[which(donnees$bedrooms ==33)] <- as.integer(3)
donnees$date <- substr(donnees$date,1,8)
annee <- substr(donnees$date,1,nchar(donnees$date)-4)
mois <- substr(donnees$date,nchar(donnees$date)-3,nchar(donnees$date)-2)
jour <- substr(donnees$date, nchar(donnees$date)-1, nchar(donnees$date))
donnees$date <- as.POSIXct(paste(annee,mois,jour,sep="-"), format="%Y-%m-%d", tz="UTC")
sam <- donnees[which(donnees$yr_built ==1900),] #Hypothèse MP : NA #Par contre ça ne semble pas être des NAs, mais bien que l'âge des maisons a été cappé à 115
nrow(sam)
# 87 cas
nrow(donnees[which(donnees$yr_built ==1901),])
# vs 29 en 1901, donc théoriquement 87-29=58 maisons construites avant 1900. Pas énorme sur 21000 données. On devrait les garder.
nrow(donnees[which(donnees$yr_built ==1902),])
nrow(donnees[which(donnees$yr_built ==1903),])
nrow(donnees[which(donnees$yr_built ==1904),])
nrow(donnees[which(donnees$yr_built ==1905),])
# Autre hypothèse : 87 maisons réellement construites en 1900 (pas de données avant)
age_reno <- ifelse(donnees$yr_renovated==0, 116, pmax(as.numeric(annee) - donnees$yr_renovated, 0)) #6 données à -1 sinon
# 116 : Maison qui n'ont jamais été rénovées, c'est pour que la fonction cut2 fonctionne
library(Hmisc)
donnees$reno <- factor(as.vector(cut2(age_reno, c(0, 10, 115)))) # (on peut rajouter des intervalles)
levels(donnees$reno) <- c("10 ans et moins", "10 ans et plus", "Jamais rénové")
#Beaucoup de maisons n'ont jamais été rénovés (surprenant), probablement que la variable tient seulement compte des grosses rénos ou bien cette question n'a pas toujours été posée
donnees$age <- ifelse(as.numeric(annee) - donnees$yr_built >= 0, as.numeric(annee) - donnees$yr_built, 0) #cap à 115
#lat et long, on prendra la heat map à matis
library(ggmap)
register_google(key = "AIzaSyDR2ob6a6HSgsBhZkN -k0QNVeJT3uio4Wg")
map<-get_map(location = c(left = min(donnees$long), bottom = min(donnees$lat), right = max(donnees$long), top = max(donnees$lat)))
ggmap(map, extent = "device")
#heatmapdata <- data.frame(cbind(log(donnees$price), donnees$lat, donnees$long ))
#colnames(heatmapdata) <- c("logprice", "lat", "long")
xmin <-  -122.4
xmax <-  -122
ymin <-  47.5
ymax <-  47.72
ggmap(map, extent = "device") + stat_summary_2d(data = donnees ,
aes(x = long, y = lat, z = log(price)),
fun = mean, alpha = 0.6, bins = 100) +
scale_fill_gradient(name = "Log(Price)", low = "green", high = "red") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, colour="black", lty = 1, lwd = 1.3, alpha = 0) +
annotate("text", x= -122.2, y = 47.6, label = "Zone urbaine")
#Removed 2 rows containing missing values (geom_tile). ???
donnees$expensive_area <- sapply(1:nrow(donnees),
function(i) as.numeric(donnees$lat[i] >= ymin & donnees$lat[i] <= ymax & donnees$long[i] >= xmin & donnees$long[i] <= xmax))
str(donnees)
summary(donnees)
donnees2 <- donnees[,-c(which(colnames(donnees)=="id"), which(colnames(donnees)=="date"),
which(colnames(donnees)=="yr_built"), which(colnames(donnees)=="yr_renovated"),
which(colnames(donnees)=="zipcode"), which(colnames(donnees)=="lat"),
which(colnames(donnees)=="long"))]
#### ACP ####
library(FactoMineR)
acp <- PCA(donnees2[,c(-which(names(donnees2)=="reno"))])
acp$eig # valeurs propres, var expliquée et % var expliquée
library(factoextra)
fviz_screeplot(acp, ncp=20)
#Corrélation variables
cormat <- cor(donnees,method = "pearson")
library(reshape2)
cormat.long <- melt(cormat)
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))
summary(donnees)
str(donnees)
#Corrélation variables
cormat <- cor(donnees2,method = "pearson")
library(reshape2)
cormat.long <- melt(cormat)
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))
str(donnees)
str(donnees2)
donnees <- read.csv("kc_house_data.csv")
donnees.init <- read.csv("kc_house_data.csv")
str(donnees)
summary(donnees)
donnees <- donnees[!donnees$bathrooms == 0,] #10 cas
donnees <- donnees[!donnees$bedrooms == 0,] #13 cas
donnees$bedrooms[which(donnees$bedrooms ==33)] <- as.integer(3)
donnees$date <- substr(donnees$date,1,8)
annee <- substr(donnees$date,1,nchar(donnees$date)-4)
mois <- substr(donnees$date,nchar(donnees$date)-3,nchar(donnees$date)-2)
jour <- substr(donnees$date, nchar(donnees$date)-1, nchar(donnees$date))
donnees$date <- as.POSIXct(paste(annee,mois,jour,sep="-"), format="%Y-%m-%d", tz="UTC")
sam <- donnees[which(donnees$yr_built ==1900),] #Hypothèse MP : NA #Par contre ça ne semble pas être des NAs, mais bien que l'âge des maisons a été cappé à 115
nrow(sam)
# 87 cas
nrow(donnees[which(donnees$yr_built ==1901),])
# vs 29 en 1901, donc théoriquement 87-29=58 maisons construites avant 1900. Pas énorme sur 21000 données. On devrait les garder.
nrow(donnees[which(donnees$yr_built ==1902),])
nrow(donnees[which(donnees$yr_built ==1903),])
nrow(donnees[which(donnees$yr_built ==1904),])
nrow(donnees[which(donnees$yr_built ==1905),])
age_reno <- ifelse(donnees$yr_renovated==0, 116, pmax(as.numeric(annee) - donnees$yr_renovated, 0)) #6 données à -1 sinon
library(Hmisc)
donnees$reno <- factor(as.vector(cut2(age_reno, c(0, 10, 115)))) # (on peut rajouter des intervalles)
levels(donnees$reno) <- c("10 ans et moins", "10 ans et plus", "Jamais rénové")
donnees$age <- ifelse(as.numeric(annee) - donnees$yr_built >= 0, as.numeric(annee) - donnees$yr_built, 0) #cap à 115
library(ggmap)
register_google(key = "AIzaSyDR2ob6a6HSgsBhZkN -k0QNVeJT3uio4Wg")
map<-get_map(location = c(left = min(donnees$long), bottom = min(donnees$lat), right = max(donnees$long), top = max(donnees$lat)))
ggmap(map, extent = "device")
#heatmapdata <- data.frame(cbind(log(donnees$price), donnees$lat, donnees$long ))
#colnames(heatmapdata) <- c("logprice", "lat", "long")
xmin <-  -122.4
xmax <-  -122
ymin <-  47.5
ymax <-  47.72
ggmap(map, extent = "device") + stat_summary_2d(data = donnees ,
aes(x = long, y = lat, z = log(price)),
fun = mean, alpha = 0.6, bins = 100) +
scale_fill_gradient(name = "Log(Price)", low = "green", high = "red") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, colour="black", lty = 1, lwd = 1.3, alpha = 0) +
annotate("text", x= -122.2, y = 47.6, label = "Zone urbaine")
donnees$expensive_area <- sapply(1:nrow(donnees),
function(i) as.numeric(donnees$lat[i] >= ymin & donnees$lat[i] <= ymax & donnees$long[i] >= xmin & donnees$long[i] <= xmax))
str(donnees)
summary(donnees)
donnees2 <- donnees[,-c(which(colnames(donnees)=="id"), which(colnames(donnees)=="date"),
which(colnames(donnees)=="yr_built"), which(colnames(donnees)=="yr_renovated"),
which(colnames(donnees)=="zipcode"), which(colnames(donnees)=="lat"),
which(colnames(donnees)=="long"))]
#### ACP ####
library(FactoMineR)
acp <- PCA(donnees2[,c(-which(names(donnees2)=="reno"))])
acp$eig # valeurs propres, var expliquée et % var expliquée
library(factoextra)
fviz_screeplot(acp, ncp=20)
#Corrélation variables
cormat <- cor(donnees2,method = "pearson")
donnees2
str(donnees2)
#Corrélation variables
cormat <- cor(donnees2[,c(-which(names(donnees2)=="reno"))],method = "pearson")
library(reshape2)
cormat.long <- melt(cormat)
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))
str(donnees2)
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))
Var2
donnees2
cormat
cormat.long
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value))
# À voir si ce sera utile pour expliquer dans rapport, pt utile de changer la couleur
donnees_view <- cbind(donnees, acp$ind$coord)
library(leaflet)
pal1 <- colorNumeric(
palette = "RdYlBu",
domain = donnees_view$Dim.1,
reverse = TRUE)
pal2 <- colorNumeric(
palette = "RdYlBu",
domain = donnees_view$Dim.2,
reverse = TRUE)
leaflet(donnees_view) %>%
addTiles() %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng = ~long,
lat = ~lat,
color = ~pal1(Dim.1),
radius = 1,
opacity = 1,
fill = TRUE,
fillColor = ~pal1(Dim.1),
fillOpacity = 1,
group = 'Composante 1'
) %>%
addCircleMarkers(lng = ~long,
lat = ~lat,
color = ~pal2(Dim.2),
radius = 1,
opacity = 1,
fill = TRUE,
fillColor = ~pal2(Dim.2),
fillOpacity = 1,
group = 'Composante 2'
) %>%
addLegend("bottomright", pal = pal1, values = ~Dim.1,
title = "CP1",
opacity = 1,
group = 'Composante 1'
) %>%
addLegend("bottomleft", pal = pal2, values = ~Dim.2,
title = "CP2",
opacity = 1,
group = 'Composante 2'
) %>%
addLayersControl(
baseGroups = c("Composante 1", "Composante 2"),
options = layersControlOptions(collapsed = FALSE)
)
ggplot(contrib.long, aes(x=carac, fill=variable, y=value))+
geom_bar(stat="identity",position=PositionDodge)+
facet_grid(~variable)+
theme(legend.position="top",axis.text.x = element_text(angle = 90))+
coord_flip()
# Visualisation coordonnées
contrib <- data.frame(acp$var$coord[,1:4])
contrib$carac <- rownames(contrib)
contrib.long <- reshape2::melt(contrib)
ggplot(contrib.long, aes(x=carac, fill=variable, y=value))+
geom_bar(stat="identity",position=PositionDodge)+
facet_grid(~variable)+
theme(legend.position="top",axis.text.x = element_text(angle = 90))+
coord_flip()
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value))+
theme(legend.position="top",axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90),col(palette = "RdYlBu",))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90),col("RdYlBu"))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90),col(RdYlBu))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),colour="RdYlBu")+
theme(axis.text.x = element_text(angle = 90))
#Corrélation variables
cormat <- cor(donnees2[,c(-which(names(donnees2)=="reno"))],method = "pearson")
library(reshape2)
cormat.long <- melt(cormat)
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),colour="Blue-Red 3")+
theme(axis.text.x = element_text(angle = 90))
#visualisation coordonnées Dim 1 et 2
donnees_acp <- cbind(donnees2, acp$ind$coord)
cormat.long <- melt(cormat)
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),colour="grey50")+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),colour="red4")+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90),colour="red4")
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90,colour = "red4"))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value,colour("red4")))+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value,colour("RdYlBu")))+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value),color="RdYlBu")+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value),color="RdYlBu")+geom_tile(aes(fill=value))+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),colour("red4"))+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),color("red4"))+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),color=red4)+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),color="red4")+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),color="black4")+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = cormat.long, aes(Var2, Var1, fill = value))+geom_tile(aes(fill=value),color="grey3")+
theme(axis.text.x = element_text(angle = 90))
